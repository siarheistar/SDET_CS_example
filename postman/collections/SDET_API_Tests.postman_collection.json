{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-4789-a0b1-c2d3e4f5g6h7",
		"name": "SDET C# Framework - API Tests",
		"description": "Comprehensive API test collection for SDET C# Test Automation Framework.\n\nCovers:\n- User Registration\n- User Login\n- Products Management\n- Orders Management\n- Calculator API\n\nTest Categories:\n- Smoke Tests\n- Regression Tests\n- Negative Tests\n- Performance Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "Register User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Successful user registration",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Response has user ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Response contains username and email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.username).to.eql(pm.variables.get('test_username'));",
									"    pm.expect(jsonData.email).to.eql(pm.variables.get('test_email'));",
									"});",
									"",
									"pm.test(\"Response does not contain password\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.not.have.property('password');",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('successfully');",
									"});",
									"",
									"// Save user ID for subsequent tests",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('user_id', jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique test data",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"",
									"pm.variables.set('test_username', `testuser_${timestamp}_${randomNum}`);",
									"pm.variables.set('test_email', `testuser_${timestamp}_${randomNum}@example.com`);",
									"pm.variables.set('test_password', 'SecurePass123!');",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Register a new user with valid credentials.\n\nExpected: 201 Created with user details."
					},
					"response": []
				},
				{
					"name": "Register User - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Registration with invalid email format",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message about invalid email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error.toLowerCase()).to.include('email');",
									"    pm.expect(jsonData.error.toLowerCase()).to.include('invalid');",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"invalid-email-format\",\n    \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Attempt to register with invalid email format.\n\nExpected: 400 Bad Request with error message."
					},
					"response": []
				},
				{
					"name": "Register User - Username Too Short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Registration with username less than 3 characters",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error mentions username length requirement\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    var error = jsonData.error.toLowerCase();",
									"    pm.expect(error).to.satisfy(function(msg) {",
									"        return msg.includes('username') && ",
									"               (msg.includes('at least') || msg.includes('characters'));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"ab\",\n    \"email\": \"valid@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"register"
							]
						},
						"description": "Attempt to register with username less than 3 characters.\n\nExpected: 400 Bad Request with validation error."
					},
					"response": []
				},
				{
					"name": "Login User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Successful user login",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains auth token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData.token).to.be.a('string');",
									"    pm.expect(jsonData.token.length).to.be.above(10);",
									"});",
									"",
									"pm.test(\"Response contains user information\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"});",
									"",
									"// Save auth token",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', jsonData.token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{test_username}}\",\n    \"password\": \"{{test_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"login"
							]
						},
						"description": "Login with valid credentials.\n\nExpected: 200 OK with auth token."
					},
					"response": []
				}
			],
			"description": "User management API endpoints including registration and login."
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Retrieve all products",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"        pm.expect(jsonData[0]).to.have.property('price');",
									"    }",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Save first product ID",
									"var jsonData = pm.response.json();",
									"if (jsonData.length > 0) {",
									"    pm.collectionVariables.set('product_id', jsonData[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Retrieve all products from the catalog.\n\nExpected: 200 OK with array of products."
					},
					"response": []
				},
				{
					"name": "Get Product By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Retrieve specific product by ID",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains product details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('price');",
									"    pm.expect(jsonData).to.have.property('description');",
									"});",
									"",
									"pm.test(\"Product ID matches requested ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get('product_id')));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						},
						"description": "Retrieve a specific product by its ID.\n\nExpected: 200 OK with product details."
					},
					"response": []
				}
			],
			"description": "Product catalog API endpoints."
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create Order - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Successful order creation",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains order ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('order_id');",
									"    pm.expect(jsonData.order_id).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Order details match request\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('product_id');",
									"    pm.expect(jsonData).to.have.property('quantity');",
									"    pm.expect(jsonData.quantity).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);",
									"});",
									"",
									"// Save order ID",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set('order_id', jsonData.order_id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"product_id\": {{product_id}},\n    \"quantity\": 2\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Create a new order with valid data.\n\nExpected: 201 Created with order details."
					},
					"response": []
				},
				{
					"name": "Create Order - Invalid Quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Order creation with invalid quantity",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message mentions quantity\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error.toLowerCase()).to.include('quantity');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"product_id\": {{product_id}},\n    \"quantity\": -1\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"orders"
							]
						},
						"description": "Attempt to create order with invalid (negative) quantity.\n\nExpected: 400 Bad Request with validation error."
					},
					"response": []
				}
			],
			"description": "Order management API endpoints."
		},
		{
			"name": "Calculator",
			"item": [
				{
					"name": "Calculate - Addition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Addition calculation",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Result is correct (10 + 5 = 15)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('result');",
									"    pm.expect(jsonData.result).to.eql(15);",
									"});",
									"",
									"pm.test(\"Response time is very fast\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"num1\": 10,\n    \"num2\": 5,\n    \"operation\": \"add\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculator",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculator"
							]
						},
						"description": "Perform addition calculation.\n\nExpected: 200 OK with correct result."
					},
					"response": []
				},
				{
					"name": "Calculate - Division by Zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test: Division by zero handling",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message about division by zero\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    var error = jsonData.error.toLowerCase();",
									"    pm.expect(error).to.satisfy(function(msg) {",
									"        return msg.includes('division') || msg.includes('zero') || msg.includes('divide');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"num1\": 10,\n    \"num2\": 0,\n    \"operation\": \"divide\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/calculator",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"calculator"
							]
						},
						"description": "Attempt division by zero.\n\nExpected: 400 Bad Request with error message."
					},
					"response": []
				}
			],
			"description": "Calculator API endpoints for mathematical operations."
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test: API health check",
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response indicates healthy status\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status).to.eql('healthy');",
							"});",
							"",
							"pm.test(\"Response time is very fast\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check if the API is healthy and responsive.\n\nExpected: 200 OK with status: healthy."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "auth_token",
			"value": ""
		},
		{
			"key": "product_id",
			"value": "1"
		},
		{
			"key": "order_id",
			"value": ""
		}
	]
}
